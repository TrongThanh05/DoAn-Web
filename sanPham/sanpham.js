// L·∫•y khung ch·ª©a c·ªßa c√°c s·∫£n ph·∫©m
const container = document.getElementById('ProductsGrid');

// L·∫•y t√™n file t·ª´ URL (vd: ao.html ‚Üí "ao")
const pageName = window.location.pathname
  .split('/')
  .pop()
  .split('.')[0]
  .toLowerCase();

// T·∫°o 1 array t·ªïng h·ª£p s·∫£n ph·∫©m t·ª´ 3 array kia khi ·ªü trong trang s·∫£n ph·∫©m
const productArray = [];
const products = (shirts, pants, shoes) => {
  const maxLength = Math.max(shirts.length, pants.length, shoes.length);

  for (let i = 0; i < maxLength; i++) {
    if (i < shirts.length) {
      productArray.push(shirts[i]);
    }
    if (i < pants.length) {
      productArray.push(pants[i]);
    }
    if (i < shoes.length) {
      productArray.push(shoes[i]);
    }
  }
};
products(shirts, pants, shoes);

// function th√™m s·∫£n ph·∫©m v√†o khung theo array c√≥ s·∫µn trong file wareHouse.js
function renderProducts(productArray, type) {
  productArray.forEach((product) => {
    const productHTML = `
      <div class="main__productsList-item col-12 col-sm-6 col-md-4 col-lg-3" 
           id="${product.id}" 
           type="${type}">
        <div class="product__img">
          <a href="../chiTietSanPham/chiTietSanPham.html?type=${type}&id=${product.id}" class="product__imgLink">
            <img class="img-fluid" src="${product.images[0]}" alt="${product.alt}" />
          </a>
          <button class="product__img-addCartBadge">
            <i class="fas fa-shopping-cart"></i>
          </button>
        </div>
        <div class="product__info">
          <div class="product__info-top">
            <h5>4Bros</h5>
            <div class="product__info-loveIcon">
              <i class="loveIcon__icon fa-regular fa-heart"></i>
              <span class="loveIcon__text">Y√™u th√≠ch</span>
            </div>
          </div>
          <a href="../chiTietSanPham/chiTietSanPham.html?type=${type}&id=${product.id}" id="productName">${product.name}</a>
          <p>${product.price}ƒë</p>
        </div>
        <a href="../chiTietSanPham/chiTietSanPham.html?type=${type}&id=${product.id}" class="product__buyNow">Mua ngay</a>
      </div>
    `;
    container.insertAdjacentHTML('beforeend', productHTML);
  });
}
// X·ª≠ l√Ω chuy·ªÉn trang trong 1 m·ª•c s·∫£n ph·∫©m
let pageNumberNow = 1;
const itemsPerPage = 9;

//Chuy·ªÉn trang
function switchPage(page) {
  container.innerHTML = '';
  const start = (page - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  let productArrayPerPage = [];

  // check trang hi·ªán t·∫°i l√† g√¨
  if (pageName == 'sanpham') {
    productArrayPerPage = productArray.slice(start, end);
  } else if (pageName == 'ao') {
    productArrayPerPage = shirts.slice(start, end);
  } else if (pageName == 'quan') {
    productArrayPerPage = pants.slice(start, end);
  } else if (pageName == 'giay') {
    productArrayPerPage = shoes.slice(start, end);
  }

  renderProducts(productArrayPerPage);
}

// T·ªïng s·ªë trang v√† th√™m s·ªë l∆∞·ª£ng button theo s·ªë l∆∞·ª£ng ƒë√≥
let pageNumberTotal = 0;
function addButtonNumber(page) {
  if (pageName == 'sanpham') {
    pageNumberTotal = Math.ceil(productArray.length / itemsPerPage);
  } else if (pageName == 'ao') {
    pageNumberTotal = Math.ceil(shirts.length / itemsPerPage);
  } else if (pageName == 'quan') {
    pageNumberTotal = Math.ceil(pants.length / itemsPerPage);
  } else if (pageName == 'giay') {
    pageNumberTotal = Math.ceil(shoes.length / itemsPerPage);
  }

  if (pageNumberTotal < 1) pageNumberTotal = 1; // ƒë·∫£m b·∫£o t·ªëi thi·ªÉu 1 trang

  const buttonQuanity = document.getElementById('pageNumberTotal');
  let pageNumberHtml = '';

  console.log('pageNumberTotal =', pageNumberTotal);
  for (let i = 1; i <= pageNumberTotal; i++) {
    pageNumberHtml += `<button value="${i}" class="page-btn">${i}</button>`;
  }

  if (buttonQuanity) {
    buttonQuanity.innerHTML = pageNumberHtml;
  }
  highlightActivePage(page);
}
//Css cho n√∫t trang
function highlightActivePage(pageNumber) {
  // X√≥a h·∫øt class active c·ªßa t·∫•t c·∫£ c√°c n√∫t tr∆∞·ªõc
  document.querySelectorAll('.page-btn').forEach((btn) => {
    btn.classList.remove('active');
  });

  // Th√™m class active cho n√∫t c√≥ value t∆∞∆°ng ·ª©ng pageNumber
  const activeBtn = document.querySelector(`.page-btn[value="${pageNumber}"]`);
  if (activeBtn) {
    activeBtn.classList.add('active');
  }
}

// Quy ƒë·ªãnh s·ªë s·∫£n ph·∫©m 1 trang khi load trang
window.addEventListener('load', () => {
  addButtonNumber(pageNumberNow);
  switchPage(pageNumberNow);
});

// document.getElementById('pageNumber').addEventListener('click', () => {
//   console.log(this.);
// });
const buttonQuanity = document.getElementById('pageNumberTotal');

buttonQuanity.addEventListener('click', (e) => {
  if (e.target.classList.contains('page-btn')) {
    let page = parseInt(e.target.value);
    pageNumberNow = page;
    switchPage(pageNumberNow);
    highlightActivePage(pageNumberNow);
  }
});

document.getElementById('prev').addEventListener('click', () => {
  if (pageNumberNow > 1) {
    pageNumberNow--;
    switchPage(pageNumberNow);
    highlightActivePage(pageNumberNow);
  }
});

document.getElementById('next').addEventListener('click', () => {
  console.log(pageNumberTotal);
  if (pageNumberNow < pageNumberTotal) {
    pageNumberNow++;
    switchPage(pageNumberNow);
    highlightActivePage(pageNumberNow);
  }
});

// H√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o m·ª•c s·∫£n ph·∫©m y√™u th√≠ch
function addHeartBadge(productName, productPrice, productSrcImg, productLink) {
  // L·∫•y gi·ªè h√†ng t·ª´ localStorage ho·∫∑c kh·ªüi t·∫°o gi·ªè h√†ng r·ªóng
  const heartProducts = JSON.parse(localStorage.getItem('heartProducts')) || [];

  // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
  const existingProduct = heartProducts.find(
    (item) => item.name === productName
  );

  if (existingProduct) {
    // N·∫øu ƒë√£ c√≥ th√¨
    alert(`${productName} ƒë√£ n·∫±m trong danh s√°ch y√™u th√≠chüí°`);
    return;
  } else {
    // N·∫øu ch∆∞a c√≥, th√™m s·∫£n ph·∫©m m·ªõi
    heartProducts.push({
      name: productName,
      price: productPrice,
      img: productSrcImg,
      link: productLink,
    });
  }

  // L∆∞u l·∫°i v√†o localStorage
  localStorage.setItem('heartProducts', JSON.stringify(heartProducts));

  // C·∫≠p nh·∫≠t badge hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  // H√†m n√†y ·ªü b√™n header.js v√¨ trang n√†o c≈©ng c√≥ header
  updateHeartBadge(heartProducts);
}
// Th√™m s·∫£n ph·∫©m y√™u th√≠ch
const loveItems = document.querySelectorAll('.product__info-loveIcon');
const heartProducts = JSON.parse(localStorage.getItem('heartProducts')) || [];
loveItems.forEach((item) => {
  const loveIcon = item.querySelector('.loveIcon__icon');
  const textIcon = item.querySelector('.loveIcon__text');
  // ƒê·ªïi tr√°i tym v√† text khi click v√†o
  loveIcon.addEventListener('click', () => {
    let heartProducts = JSON.parse(localStorage.getItem('heartProducts')) || [];
    if (loveIcon.classList.contains('fa-regular')) {
      const productItem = loveIcon.closest('.main__productsList-item');
      // L·∫•y t√™n, gi√°, ·∫£nh, ƒë∆∞·ªùng link c·ªßa s·∫£n ph·∫©m
      const productName = productItem.querySelector('#productName')?.innerText;
      const productPrice = parseInt(productItem.dataset.price);
      const productLink = productItem
        .querySelector('.product__imgLink')
        .getAttribute('href');
      const productSrcImg = productItem
        .querySelector('img')
        .getAttribute('src');

      if (productName || productPrice || productSrcImg || productLink) {
        addHeartBadge(productName, productPrice, productSrcImg, productLink);
        // s·ª≠a tr√°i tym v√† text khi th√™m
        loveIcon.classList.remove('fa-regular');
        loveIcon.classList.add('fa-solid');
        loveIcon.style.color = 'red';
        textIcon.innerText = 'B·ªè Y√™u th√≠ch'; // Thay ƒë·ªïi vƒÉn b·∫£n t∆∞∆°ng ·ª©ng
      } else {
        alert(`Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin s·∫£n ph·∫©m`);
      }
    } else {
      loveIcon.classList.remove('fa-solid');
      loveIcon.classList.add('fa-regular');
      loveIcon.style.color = '#333';
      textIcon.innerText = 'Y√™u th√≠ch'; // Thay ƒë·ªïi vƒÉn b·∫£n t∆∞∆°ng ·ª©ng

      const productItem = loveIcon.closest('.main__productsList-item');
      // L·∫•y t√™n, gi√°, ·∫£nh, ƒë∆∞·ªùng link c·ªßa s·∫£n ph·∫©m
      const productName = productItem.querySelector('#productName').innerText;

      let index = heartProducts.findIndex(
        (product) => product.name === productName
      );
      if (index !== -1) {
        heartProducts.splice(index, 1);
        // L∆∞u l·∫°i v√†o localStorage
        localStorage.setItem('heartProducts', JSON.stringify(heartProducts));
        // C·∫≠p nh·∫≠t badge hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        updateHeartBadge(heartProducts);
      } else {
        alert(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m y√™u th√≠ch`);
      }
    }
  });
});

// H√†m ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
function addToCart(productName, productPrice, productImg) {
  // L·∫•y gi·ªè h√†ng t·ª´ localStorage ho·∫∑c kh·ªüi t·∫°o gi·ªè h√†ng r·ªóng
  let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];

  // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
  const existingProduct = cartItems.find((item) => item.name === productName);

  if (existingProduct) {
    // N·∫øu ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
    existingProduct.quantity += 1;
  } else {
    // N·∫øu ch∆∞a c√≥, th√™m s·∫£n ph·∫©m m·ªõi
    cartItems.push({
      name: productName,
      price: productPrice,
      quantity: 1,
      img: productImg,
    });
  }
  // L∆∞u l·∫°i v√†o localStorage
  localStorage.setItem('cartItems', JSON.stringify(cartItems));

  // C·∫≠p nh·∫≠t badge hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  // H√†m n√†y ·ªü b√™n header.js v√¨ trang n√†o c≈©ng c√≥ header
  updateCartBadge(cartItems);

  // Hi·ªÉn th·ªã th√¥ng b√°o
  alert(`üõí ${productName} ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng ‚úÖ`);
}

// L·∫Øng nghe s·ª± ki·ªán click tr√™n danh s√°ch s·∫£n ph·∫©m
document
  .querySelector('.main__productsList-all')
  .addEventListener('click', (event) => {
    // Ki·ªÉm tra n·∫øu n√∫t th√™m gi·ªè h√†ng ƒë∆∞·ª£c nh·∫•n
    const button = event.target.closest('.product__img-addCartBadge');
    if (!button) return;

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ DOM
    const productItem = button.closest('.main__productsList-item');
    if (!productItem) return;

    const productName = productItem.querySelector('#productName')?.innerText;
    const productPrice = parseInt(productItem.dataset.price);
    const productImg = productItem.querySelector('img').getAttribute('src');
    // Ki·ªÉm tra t√™n v√† gi√° c√≥ h·ª£p l·ªá kh√¥ng v√† th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    if (productName && productPrice && productImg) {
      addToCart(productName, productPrice, productImg);
    }
  });

// Hi·ªÉn th·ªã s·∫£n ph·∫©m theo theo gi√°
function hiddenAllProduct(condition) {
  document.querySelectorAll('.main__productsList-item').forEach((item) => {
    const price = Number(item.dataset.price);
    if (condition === 'under100') {
      if (price < 100000) {
        item.style.display = 'flex';
      } else {
        item.style.display = 'none';
      }
    } else {
      if (condition === '100-200') {
        if (price < 200000 && price >= 100000) {
          item.style.display = 'flex';
        } else {
          item.style.display = 'none';
        }
      } else {
        if (condition === '200-300') {
          if (price < 300000 && price >= 200000) {
            item.style.display = 'flex';
          } else {
            item.style.display = 'none';
          }
        } else {
          if (condition === '300-500') {
            if (price < 500000 && price >= 300000) {
              item.style.display = 'flex';
            } else {
              item.style.display = 'none';
            }
          } else {
            if (condition === 'over500') {
              if (price >= 500000) {
                item.style.display = 'flex';
              } else {
                item.style.display = 'none';
              }
            } else {
              item.style.display = 'flex';
            }
          }
        }
      }
    }
  });
}
document.querySelectorAll('.price').forEach((box) => {
  box.addEventListener('change', () => {
    const isChecked = box.checked;
    if (isChecked) {
      hiddenAllProduct(box.value);
    } else {
      document.querySelectorAll('.main__productsList-item').forEach((item) => {
        item.style.display = 'flex';
      });
    }
  });
});
